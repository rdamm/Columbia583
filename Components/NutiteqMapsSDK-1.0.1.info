{"Name":"Nutiteq Maps SDK","Id":603,"Alias":"NutiteqMapsSDK","Description":"\n##About Nutiteq Maps SDK \n\nNutiteq SDK is advanced maps toolkit with flexible extendability. It suits best for advanced client apps for Geographical Information Systems (GIS) data display and editing, field survey, 3D visualization and also end-user apps which need offline maps, professional developer support and more customization options\n\n###Key advantages\n* Runs on all Android devices - including ones without Google Services like Google Glass, Nokia, Amazon, BlackBerry and others\n* Can choose custom base map source: online or offline, including vector map sources, aerials, satellite etc\n* 2.5D view: tilt and rotate map\n* Add 3D markers, landmarks, objects and models to map\n* Full 3D city view, with your custom data\n* Offline mapping using MBTiles, custom tiles, persistent caching and many other data formats and sources\n* Globe view\n* Supports any map projection, which makes it more usable for enterprise GIS solutions\n* GIS file formats: GeoTIFF, Shape, KML, GeoJSON, BSB and tens of others\n* No bundled advertising\n* No mandatory provider logo on map\n\n###Usage\n\nUse MapView as a normal view in your Android app layout. There are methods to manipulate map and add data as Layers. You can even create your own custom Layers if provided ones are not enough. See **Getting Started** for code samples. API documentation is included in doc browser of the component.\n\n##SDK Version\n\nNutiteq Map SDK version: 2.3.1","Version":"1.0.1","Summary":"Add 3D Maps to your Xamarin apps.","QuickStart":"This is how you add MapView with a pin to your application:\n\n1) **Add MapView to your application main layout**\n\n```xml\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"fill_parent\"\n    android:layout_height=\"fill_parent\"\n    android:orientation=\"vertical\" \u003e\n   \u003ccom.nutiteq.MapView\n    android:id=\"@+id/mapView\"\n    android:layout_width=\"fill_parent\" \n    android:layout_height=\"fill_parent\" \n    /\u003e\n\u003c/LinearLayout\u003e\n```\n\n2) **Create MapView object.** \n\nUsually you have the MapView as member in your main activity class, load layout and load the MapView from layout. MapView also need to initialize and start map. Three steps are needed here as minimum: \n\n* Define map **Configuration** package, which is put in Components object, \n* Define **base map layer** - source of background map\n* Tell map object to **start map** activities (downloading threads etc), this is best to be done in Activity lifetime functions onStart and onStop.\n\n```csharp\nusing Nutiteq.SDK;\n\n[Activity (Label = \"Nutiteq.HelloMap\", MainLauncher = true)]\npublic class MainActivity : Activity\n{\n    /// \u003csummary\u003e\n\t/// The Nutiteq MapView\n\t/// \u003c/summary\u003e\n\tprivate MapView _mapView;\n\tprotected override void OnCreate ( Bundle bundle )\n\t{\n\t\tbase.OnCreate ( bundle );\n\n\t\t/// Set our view from the \"main\" layout resource\n\t\tSetContentView ( Resource.Layout.Main );\n\t\n\t\t/// Get our map from the layout resource. \n\t\t_mapView = FindViewById\u003cMapView\u003e ( Resource.Id.mapView );\n\n\t\t/// Components keeps internal state and parameters for MapView\n\t\t_mapView.Components = new Components ();\n\n\t\t/// Define base projection, almost always EPSG3857, but others can be defined also\n\t\tEPSG3857 proj = new EPSG3857 ();\n\n\t\t/// define the map layer MapQuest Open Tiles\n\t\tIRasterDataSource dataSource = new HTTPRasterDataSource (proj, 0, 18, \"http://otile1.mqcdn.com/tiles/1.0.0/osm/{zoom}/{x}/{y}.png\");\n\t\tRasterLayer mapLayer = new RasterLayer (dataSource, 0);\n\n\t\t/// Set online base layer  \n\t\t_mapView.Layers.BaseLayer = mapLayer;\n\t}\n\t\n\tprotected override void OnStart ()\n\t{\n\t\t_mapView.StartMapping ();\n\t\tbase.OnStart ();\n\t}\n\n\tprotected override void OnStop ()\n\t{\n\t\tbase.OnStop ();\n\t\t_mapView.StopMapping ();\n\t}\n```\n\n3) **Add a marker** to map, to given coordinates. Pin will have pop-up Label which opens when you click on it.\n\n```csharp\n\n\t/// create layer and add object to the layer, finally add layer to the map. \n\t/// All overlay layers must be same projection as base layer, so we reuse it\n\t_markerLayer = new MarkerLayer ( _mapView.Layers.BaseLayer.Projection );\n\t_mapView.Layers.AddLayer ( _markerLayer );\n\n\t/// Define label what is shown when you click on marker.\n\tLabel markerLabel = new DefaultLabel ( \"Marker\", \"San Francisco\" );\n\n\t/// Define the location of the marker, it must be converted to EPSG3857 coordinate system\n\tMapPos mapLocation = _markerLayer.Projection.FromWgs84 ( -122.41666666667, 37.76666666666 );\n\n\t/// define marker style.\n\t/// Copy olmarker.png from sample project to your Resources/drawable folder\n\tBitmap pointMarker = UnscaledBitmapLoader.DecodeResource ( Resources, Resource.Drawable.olmarker );\n\tMarkerStyle.Builder markerStyleBuilder = new MarkerStyle.Builder ();\n\tmarkerStyleBuilder.SetBitmap ( pointMarker );\n\tmarkerStyleBuilder.SetColor ( Nutiteq.SDK.Color.White );\n\tmarkerStyleBuilder.SetSize ( 0.5f );\n\tMarkerStyle markerStyle = markerStyleBuilder . Build ();\n\n\t/// add the label to the Marker\n\tMarker marker = new Marker ( mapLocation, markerLabel, markerStyle, null );\n\n\t/// add the label to the layer\n\t_markerLayer.Add ( marker );\n\n\t/// center Map View at SF, set zoom\n\t_mapView.FocusPoint = _mapView.Layers.BaseLayer.Projection.FromWgs84 ( -122.41666666667, 37.76666666666 );\n\t_mapView.Zoom = 10f;\n\n```\n4) **Add license registration**\n\nFree installation package will have \"Nutiteq evaluation\" logo on map. Adding license code removes the logo and enables to replace with own one. Please email sales@nutiteq.com to purchase license code.\n\n```csharp\n    // register license. Not needed for development/evaluation\n\tbool Res = MapView.RegisterLicense (\"\u003cENTER YOUR LICENSEKEY HERE\u003e\", ApplicationContext);\n\tLog.Debug (\"license validity: \" + Res);\n\n\t// Set watermark bitmap - only available for commercial licenses, replaces Nutiteq Evaluation watermark. -1, -1 are relative screen coordinates, 0.2 is watemark size relative to screen\n\tMapView.SetWatermark (UnscaledBitmapLoader.DecodeResource (Resources, Resource.Drawable.Icon), -1.0f, -1.0f, 0.2f);\n```\n\n5) **Enhance your app.** Next please take a look to included HelloMap and AdvancedMap samples, these provide you a lot of useful code snippets. \n\n## Help and support\n\nFor API documentation click \"Open API Documentation\" in component page, this will open docs in Mono Documentation Browser. \n\nFor advanced features [Nutiteq Maps SDK wiki documentation](https://github.com/nutiteq/hellomap3d/wiki) could be helpful. The developer docs and guides have  Android Java API samples, but same functions are available via Xamarin component and C# API. If you need help to implement these please post to the community forum.\n\n**Support channels:**\n\n* For all developers: community support and discussions: email to nutiteq-dev@googlegroups.com or use [nutiteq-dev web forum](https://groups.google.com/forum/#!forum/nutiteq-dev)\n* For paid customers we provide email support. Please contact sales@nutiteq.com to arrange the service\n","Hash":"5b8da2c88d57b010c27845240fd87937","TargetPlatforms":["android"],"TrialHash":null}